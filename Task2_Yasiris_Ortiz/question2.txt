Yasiris Ortiz  - Part 2

Q2 Explanation

In this program, we are returning three different values a and b which are
interger values performing different arithmetic operations during the program. And the 
value of the process id which is a unique number or process identifier.

How the code arrives to these values? First of all, at the beginning of the program we have the parent process,
then we can create child processes by using the systmem call function fork() which creates new processes. Fork 
return -1 if the creation of the child process failes. Meaning that if the child that we have forked != 0, the
program will do something else. 

In the first fork, this happens once for the parent and again for the child. I have numered
each of the values from 1-4 next to their output.After running the code multiple times,I noticed
the following:
    1. The last else in the code get executed first because by forking the child
    changes the value of fq.
    2 - The first child and second process ids are the same.
    3 - The PID keep changing every time we run the program,
    however, the arithmetic operations remain the same.

Is there any changes in the order of execution? Yes, there are changes in the execution 
of the program. As shown in the sample output the values at a4 and b4 are being printed out first.

Output example:  
Value a4:10
Value b4:30
Value of the pid is: 13208

Value a1:35
Value b1:25
Value of the pid is: 13209

Value a2:35
Value b2:40
Value of the pid is: 13209
                                                                                                                                                                                                         
Value a3:895
Value b3:25
Value of the pid is: 13210


